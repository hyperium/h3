name: CI
on:
  pull_request:
  push:
    branches:
      - master

env:
  RUST_BACKTRACE: 1
  rs_style: stable
  rs_msrv: 1.56
  rs_doc: nightly
  rs_lint: stable
  rs_fuzz: nightly

jobs:
  ci-pass:
    name: CI is green
    runs-on: ubuntu-latest
    needs:
      - style
      - msrv
      - test
      - doc
      - lint
      - fuzz
    steps:
      - run: exit 0

  style:
    name: Check Style
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust ${{ env.rs_style }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.rs_style }}
          override: true
          components: rustfmt
      - uses: Swatinem/rust-cache@v2
      - name: cargo fmt --all -- --check
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  msrv:
    name: Check MSRV
    needs: [style]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust ${{ env.rs_msrv }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.rs_msrv }}
          override: true
      - uses: Swatinem/rust-cache@v2
      - name: cargo check --workspace
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --workspace

  test:
    name: Test ${{ matrix.rust }}
    needs: [style]
    strategy:
      matrix:
        rust:
          - stable
          - beta
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust ${{ matrix.rust }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
      - uses: Swatinem/rust-cache@v2
      - name: cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
      - name: h3Spec
        run: ./ci/h3spec.sh
        if: matrix.rust == 'stable'

  doc:
    name: Build docs
    needs: [style, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust ${{ env.rs_doc }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain:  ${{ env.rs_doc }}
          override: true
      - uses: Swatinem/rust-cache@v2
      - name: cargo rustdoc -p h3 -- -D intra-doc-link-resolution-failure
        uses: actions-rs/cargo@v1
        with:
          command: rustdoc
          args: -p h3 -- -D intra-doc-link-resolution-failure

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust ${{ env.rs_lint }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.rs_lint }}
          override: true
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - name: cargo clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy

  fuzz:
    name: Fuzz test
    needs: [style, test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust ${{ env.rs_fuzz }}
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.rs_fuzz }}
          override: true
      - uses: Swatinem/rust-cache@v2
      - name: Install cargo-fuzz
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-fuzz
      - name: cargo fuzz run fuzz_varint -- -runs=1
        uses: actions-rs/cargo@v1
        with:
          command: +nightly
          args: fuzz run fuzz_varint -- -runs=1

  compliance:
    name: Compliance report
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0
      - name: Generate compliance report
        uses: ./.github/actions/compliance
        with:
          extract-script: ${{ github.workspace }}/ci/compliance/extract.sh
          report-script: ${{ github.workspace }}/ci/compliance/report.sh
